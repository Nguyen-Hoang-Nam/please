#!/bin/bash

COMMAND_TYPE=''
COMMAND_INFO=false

CONFIGURATION_FILE=''
CONFIGURATION_FILE_EXTENSION=''
CONFIGURATION_FILE_NAME=''
CONFIGURATION_IS_ABSOLUTE=false

CONFIGURATION_JSON=false
CONFIGURATION_YAML=false

RIPGREP_SUPPORT=false
FD_SUPPORT=false

if command -v jq &> /dev/null; then
    CONFIGURATION_JSON=true
else
    err "Sorry, you must have jq to parse configuration."
fi

if command -v yq &> /dev/null; then
    CONFIGURATION_YAML=true
fi

if command -v fd &> /dev/null; then
    FD_SUPPORT=true
fi

if command -v rg &> /dev/null; then
    RIPGREP_SUPPORT=true
fi

command_exec='command_not_found'
is_found=false
config_path=''
match_list=()

err() {
    echo "${1}" >&2
}

help() {
    printf "Manage all command tools as one\n"
	printf "\nUSAGE:\n"
    printf "    please [OPTION]\n"
    printf "\nOPTIONS:\n"
    printf "    run <file-name>\t\tRun command\n"
    printf "    build <file-name>\t\tBuild command\n"
    printf "    clean <file-name>\t\tClean command\n"
    printf "    deploy <file-name>\t\tDeploy command\n"
    printf "    install <file-name>\t\tInstall command\n"
    printf "    test <file-name>\t\tTest command\n"
    printf "    info <command>\t\tShow description of command\n"
    printf "    help \t\t\tShow help\n"
    printf "\nEXAMPLE:\n"
    printf "    please run\n"
}

command_not_found() {
    err "Sorry, I can't find it"
}

config_not_found() {
    err "Sorry, please create please.json file to start"
}

multiple_match() {
    err "Match multiple time"
}

project_not_match() {
    err "Sorry, I can't match your project"
}

extension_not_support() {
    err "Sorry, your configuration's extension does not supported"
}

dependency_not_found() {
    err "Sorry, please install ${1} before use this command"
}

trim_double_quote() {
    local text=$1
    text="${text/#\"}"
    text="${text/%\"}"

    echo "${text}"
}

trim_single_quote() {
    local text=$1
    text="${text/#\'}"
    text="${text/%\'}"

    echo "${text}"
}

find_configuration_file() {
	local path
    path="$(pwd)"
	while [[ "${path}" != "" ]]; do
        if [[ ${CONFIGURATION_JSON} == true ]] && [[ -f "${path}/${CONFIGURATION_FILE_NAME}.json" ]]; then
            CONFIGURATION_FILE="${CONFIGURATION_FILE_NAME}.json"
            CONFIGURATION_FILE_EXTENSION='json'
            break
        fi

        if [[ ${CONFIGURATION_YAML} == true ]]; then
            if [[ -f "${path}/${CONFIGURATION_FILE_NAME}.yaml" ]]; then
                CONFIGURATION_FILE="${CONFIGURATION_FILE_NAME}.yaml"
                CONFIGURATION_FILE_EXTENSION='yaml'
                break
            fi

            if [[ -f "${path}/${CONFIGURATION_FILE_NAME}.yml" ]]; then
                CONFIGURATION_FILE="${CONFIGURATION_FILE_NAME}.yml"
                CONFIGURATION_FILE_EXTENSION='yaml'
                break
            fi
        fi

		path="${path%/*}"
	done

	if [[ "${path}" == "" ]]; then
		config_not_found
        exit 1
	fi

    config_path="${path}"
}

check_dependencies() {
    command_dependencies=$(echo "${1}" | jq -r ".dependencies")
    if [[ ${command_dependencies} != null ]]; then
        while read -r dependency; do
            file_jq() {
                echo "${dependency}" | jq "${1}"
            }

            dependency_command=$(file_jq '.command')
            if [[ ${dependency_command} == null ]]; then continue; fi

            dependency_command_trim=$(trim_double_quote "${dependency_command}")
            if ! command -v "${dependency_command_trim}" &> /dev/null; then
                dependency_not_found "${dependency_command_trim}"
                exit 1
            fi
        done < <(echo "${command_dependencies}" | jq -c '.[]')
    fi
}

print_dependencies() {
    local count
    count=0

    command_dependencies=$(echo "${1}" | jq -r ".dependencies")
    if [[ ${command_dependencies} != null ]]; then
        while read -r dependency; do
            file_jq() {
                echo "${dependency}" | jq "${1}"
            }

            dependency_command=$(file_jq '.command')
            if [[ ${dependency_command} == null ]]; then continue; fi

            (( count++ ))

            dependency_command_trim=$(trim_double_quote "${dependency_command}")
            if [[ ${count} == 1 ]]; then
                echo "Dependencies:"
                echo "  - ${dependency_command_trim}"
            fi
        done < <(echo "${command_dependencies}" | jq -c '.[]')
    fi
}

set_command() {
    local command_data
	command_data=${1}

    if [[ "${COMMAND_INFO}" == true ]]; then
        command_exec=$(echo "${command_data}" | jq -r ".command")
        if [[ ${command_exec} == null ]]; then
            command_exec='command_not_found'
        else
            is_found=true
        fi

        printf "Command: %s\n\n" "${command_exec}"

        local command_description
        command_description=$(echo "${command_data}" | jq -r ".description")
        if [[ ${command_description} != null ]]; then
            echo "Description: ${command_description}"
        fi

        print_dependencies "${command_data}"
    else
        check_dependencies "${command_data}"

        command_exec=$(echo "${command_data}" | jq -r ".command")
        if [[ ${command_exec} == null ]]; then
            command_exec='command_not_found'
        else
            is_found=true
        fi
    fi
}

set_command_jq() {
    local command_json=$1

    local command_data
    command_data=$(echo "${command_json}" | jq -r ".${COMMAND_TYPE}")

    set_command "${command_data}"
}

set_command_yq() {
    local command_yaml=$1

    local command_data
	command_data=$(echo "${command_yaml}" | yq -r ".${COMMAND_TYPE}")

    set_command "${command_data}"
}

get_highest_priority() {
	local max_priority=1
	for match in "${match_list[@]}"; do
        match_trim=$(trim_single_quote "${match}")
		priority=$(jq '.priority' <<<"${match_trim}")
        if [[ $priority != null ]] && [[ $max_priority -lt $priority ]]; then
			max_priority=$priority
		fi
	done

	echo "${max_priority}"
}

get_highest_match_project() {
    local max_priority
    max_priority=${1}

    local count_max_match
    count_max_match=0

    local max_match
    max_match=''
    for match in "${match_list[@]}"; do
        match_trim=$(trim_single_quote "${match}")
        priority=$(jq '.priority' <<<"${match_trim}")
        if [[ $priority == null ]]; then
            if [[ $max_priority == 1 ]]; then
                max_match="${match}"
                (( count_max_match++ ))
            fi
        else
            if [[ $max_priority == "$priority" ]]; then
                max_match="${match}"
                (( count_max_match++ ))
            fi
        fi

        if [[ $count_max_match == 2 ]]; then
            multiple_match
            exit 1
        fi
    done

    echo "${max_match}"
}

match_project() {
    local projects

    if [[ "${CONFIGURATION_FILE_EXTENSION}" == 'json' ]]; then
        projects="$(echo "${config}" | jq -c '.projects | .[]')"
    elif [[ "${CONFIGURATION_FILE_EXTENSION}" == 'yaml' ]]; then 
        projects="$(echo "${config}" | yq -c '.projects | .[]')"
    fi

    while read -r project; do
        project_jq() {
            echo "${project}" | jq "${1}"
        }

        directory=$(project_jq '.directory')
        if [[ $directory != null ]] && [[ "${directory}" == "\"${PWD##*/}\"" ]]; then
            match_list+=("'$project'")
            continue
        fi

        files=$(project_jq '.files')
        if [[ $files == null ]]; then continue; fi

        while read -r file; do
            file_jq() {
                echo "${file}" | jq "${1}"
            }

            file_name=$(file_jq '.name')
            if [[ ${file_name} == null ]]; then continue; fi

            file_name_trim=$(trim_double_quote "${file_name}")
            if [[ ${FD_SUPPORT} == true ]]; then
                if ! fd -q "${file_name_trim}"; then continue; fi
            else
                if ! find "${file_name_trim}" &>/dev/null; then continue; fi
            fi

            file_match=$(file_jq '.match')
            if [[ ${file_match} == null ]]; then
                match_list+=("'$project'")
                continue
            fi

            # Support regex file name
            file_match_trim=$(trim_double_quote "${file_match}")
            if [[ ${RIPGREP_SUPPORT} == true ]]; then
                if rg -q "${file_match_trim}" "${file_name_trim}"; then
                    match_list+=("'$project'")
                fi
            else
                if grep -q "${file_match_trim}" <"${file_name_trim}"; then
                    match_list+=("'$project'")
                fi
            fi
        done < <(echo "${files}" | jq -c '.[]')
    done < <(echo "${projects}")
}

set_match_command() {
    match_project

    if [[ ${#match_list[@]} == 0 ]]; then
        project_not_match
        exit 1

    elif [[ ${#match_list[@]} == 1 ]]; then
        match_trim=$(trim_single_quote "${match_list[0]}")
        set_command_jq "${match_trim}"
        return 0
    fi

	local max_priority
    max_priority=$(get_highest_priority)

    local max_match
    max_match=$(get_highest_match_project "${max_priority}")

	if [[ $max_match != "" ]]; then
        max_match_trim=$(trim_single_quote "${max_match}")
        set_command_jq "${max_match_trim}"
	fi
}

get_extension() {
    if [[ "${CONFIGURATION_FILE}" == '' ]]; then
        CONFIGURATION_FILE_NAME='please'
        if [[ ${CONFIGURATION_JSON} != true ]] && [[ ${CONFIGURATION_YAML} != true ]]; then
            extension_not_support
            exit 1
        fi

    else
        CONFIGURATION_IS_ABSOLUTE=true
        CONFIGURATION_FILE_EXTENSION="${CONFIGURATION_FILE#*.}"
        CONFIGURATION_FILE_NAME="${CONFIGURATION_FILE%.*}"
        if [[ "${CONFIGURATION_FILE_EXTENSION}" == '' ]]; then
            extension_not_support
            exit 1

        elif [[ "${CONFIGURATION_FILE_EXTENSION}" == 'json' ]] && [[ "${CONFIGURATION_JSON}" == true ]]; then
            return 0

        elif [[ "${CONFIGURATION_FILE_EXTENSION}" == 'yaml' ]] && [[ "${CONFIGURATION_YAML}" == true ]]; then
            return 0

        elif [[ "${CONFIGURATION_FILE_EXTENSION}" == 'yml' ]] && [[ "${CONFIGURATION_YAML}" == true ]]; then
            CONFIGURATION_FILE_EXTENSION='yaml'
            return 0

        else
            extension_not_support
            exit 1

        fi
    fi
}

read_configuration_file() {
    get_extension

    if [[ ${CONFIGURATION_IS_ABSOLUTE} == true ]]; then
        if [[ ! -f "$(pwd)/${CONFIGURATION_FILE_NAME}.${CONFIGURATION_FILE_EXTENSION}" ]]; then
            config=$(cat "$(pwd)/${CONFIGURATION_FILE_NAME}.${CONFIGURATION_FILE_EXTENSION}")
        fi

    else
        if ! find_configuration_file; then exit 1; fi

        config=$(cat "${config_path}/${CONFIGURATION_FILE}")
    fi

    if [[ $(pwd) == "${config_path}" ]]; then
        if [[ "${CONFIGURATION_FILE_EXTENSION}" == 'json' ]]; then
            set_command_jq "${config}";
        elif [[ "${CONFIGURATION_FILE_EXTENSION}" == 'yaml' ]]; then 
            set_command_yq "${config}";
        fi
    fi

	if [[ ${is_found} = false ]]; then
        if [[ "${CONFIGURATION_FILE_EXTENSION}" == 'json' ]]; then
            if [[ $(echo "${config}" | jq 'has("projects")') == true ]]; then set_match_command; fi
        elif [[ "${CONFIGURATION_FILE_EXTENSION}" == 'yaml' ]]; then 
            if [[ $(echo "${config}" | yq 'has("projects")') == true ]]; then set_match_command; fi
        fi
	fi

}

exec_command() {
    printf "Command: %s\n\n" "${command_exec}"
    printf "Are you sure to run this command (y/n)? "
    read -r answer
    case ${answer:0:1} in
        y|Y )
            eval ${command_exec}
            ;;
        * )
            echo "End"
            ;;
    esac
}

main() {
    case "${1}" in
        run)
            COMMAND_TYPE='run'
            CONFIGURATION_FILE="${2}"

            if read_configuration_file; then exec_command; fi
            ;;

        install)
            COMMAND_TYPE='install'
            CONFIGURATION_FILE="${2}"

            if read_configuration_file; then exec_command; fi
            ;;

        clean)
            COMMAND_TYPE='clean'
            CONFIGURATION_FILE="${2}"

            if read_configuration_file; then exec_command; fi
            ;;

        build)
            COMMAND_TYPE='build'
            CONFIGURATION_FILE="${2}"

            if read_configuration_file; then exec_command; fi
            ;;

        deploy)
            COMMAND_TYPE='deploy'
            CONFIGURATION_FILE="${2}"

            if read_configuration_file; then exec_command; fi
            ;;

        test)
            COMMAND_TYPE='test'
            CONFIGURATION_FILE="${2}"

            if read_configuration_file; then exec_command; fi
            ;;

        info)
            COMMAND_TYPE=${2}
            COMMAND_INFO=true

            read_configuration_file
            ;;

        help)
            help
            exit 0
            ;;

        *)
            help
            exit 1
            ;;
    esac
}

main "$@"
